# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActivityAddPathPointInput {
  activityId: ObjectID!
  lat: String!
  lon: String!
}

input ActivityAddScoreInput {
  activityId: ObjectID!
  points: Float!
}

input ActivityAddTrashInput {
  activityId: ObjectID!
  lat: String!
  lon: String!
}

input ActivityCreateInput {
  activityType: ActivityType!
  description: String!
  distance: Float! = 0
  durationTime: Float! = 0
  imageUrls: [String!]! = []
  name: String!
  path: [PathPointInput!]! = []
  points: Float! = 0
  trashLocations: [PathPointInput!]! = []
  userId: ObjectID!
}

input ActivityEndInput {
  activityId: ObjectID!
  description: String
  distance: Float!
  imageUrls: [String!]!
  name: String
}

input ActivityFindManyInput {
  activityType: ActivityType
  description: String
  maxDistance: Float
  maxDurationTime: Float
  maxPoints: Float
  maxTrashCount: Float
  minDistance: Float
  minDurationTime: Float
  minPoints: Float
  minTrashCount: Float
  name: String
}

input ActivityFindManySortInput {
  activityType: SortInput
  createdAt: SortInput
  distance: SortInput
  durationTime: SortInput
  name: SortInput
  points: SortInput
  trashCount: SortInput
  updatedAt: SortInput
}

input ActivityInput {
  id: ObjectID!
}

type ActivityObject {
  activityType: ActivityType!
  createdAt: DateTime!
  currentDuration: Float
  description: String
  distance: Float!
  durationTime: Float!
  endTime: DateTime
  id: ObjectID!
  imageUrls: [String!]!
  isActive: Boolean!
  name: String
  path: [PathPointObject!]!
  points: Float!
  startTime: DateTime
  trashCount: Float!
  trashLocations: [PathPointObject!]!
  updatedAt: DateTime!
  user: UserObject
  userId: ObjectID!
}

type ActivityPaginationResponse {
  data: [ActivityObject!]!
  metadata: PaginationMetadata!
}

input ActivityStartInput {
  activityType: ActivityType!
  userId: ObjectID!
}

enum ActivityType {
  BIKING
  OTHER
  RUNNING
  TREKKING
  WALKING
}

input ActivityUpdateInput {
  activityType: ActivityType
  description: String
  distance: Float
  durationTime: Float
  id: ObjectID!
  imageUrls: [String!]
  name: String
  path: [PathPointUpdateInput!]
  points: Float
  trashCount: Float
}

input AwardCreateInput {
  iconUrl: String!
}

input AwardFindManyInput {
  iconUrl: String
}

input AwardFindManySortInput {
  createdAt: SortInput
  iconUrl: SortInput
  updatedAt: SortInput
}

input AwardInput {
  id: ObjectID!
}

type AwardObject {
  coin: Float!
  createdAt: DateTime!
  iconUrl: String!
  id: ObjectID!
  title: String!
  updatedAt: DateTime!
}

type AwardPaginationResponse {
  data: [AwardObject!]!
  metadata: PaginationMetadata!
}

input AwardUpdateInput {
  iconUrl: String
  id: ObjectID!
}

input ChallengeCreateInput {
  description: String!
  iconUrl: String!
  points: Float!
  topic: String!
  type: ChallengeType!
}

input ChallengeFindManyInput {
  description: String
  points: Float
  topic: String
}

input ChallengeFindManySortInput {
  createdAt: SortInput
  description: SortInput
  points: SortInput
  topic: SortInput
  updatedAt: SortInput
}

input ChallengeInput {
  id: ObjectID!
}

type ChallengeObject {
  coin: Float!
  createdAt: DateTime!
  description: String!
  iconUrl: String!
  id: ObjectID!
  points: Float!
  topic: String!
  type: ChallengeType!
  updatedAt: DateTime!
}

type ChallengePaginationResponse {
  data: [ChallengeObject!]!
  metadata: PaginationMetadata!
}

input ChallengeProgressFindInput {
  challengeId: ObjectID
  userId: ObjectID
}

input ChallengeStartInput {
  challengeId: ObjectID!
  userId: ObjectID!
}

enum ChallengeType {
  COMPANY
  OWN
}

input ChallengeUpdateInput {
  description: String
  iconUrl: String
  id: ObjectID!
  points: Float
  topic: String
  type: ChallengeType
}

input ChallengeUpdateProgressInput {
  challengeId: ObjectID!

  """Progress percentage from 0 to 100"""
  progress: Int!
  userId: ObjectID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Error {
  ACTIVITY_ALREADY_STARTED
  ACTIVITY_NOT_ACTIVE
  ACTIVITY_NOT_FOUND
  EXAMPLE_NAME_NOT_UNIQUE_CODE
  EXAMPLE_NOT_FOUND_CODE
  MARKETPLACE_INSUFFICIENT_COINS
  MARKETPLACE_NOT_FOUND
  UNAUTHENTICATED_ERROR_CODE
}

input EventCreateInput {
  eventType: EventType!
  imageUrl: String! = "https://picsum.photos/64/64"
  link: String
  localization: LocalizationInput!
  name: String!
  time: String!
  userIds: [String!]!
}

input EventFindManyInput {
  date: DateTime
  eventType: [EventType!]
  localization: LocalizationInput
  name: String
  place: String
  time: DateTime
  userIds: [String!]
}

input EventFindManySortInput {
  createdAt: SortInput
  date: SortInput
  eventType: SortInput
  name: SortInput
  time: SortInput
  updatedAt: SortInput
}

input EventInput {
  eventType: EventType!
  id: ObjectID!
  imageIcon: String!
  localization: LocalizationInput!
  name: String!
  time: String!
  userIds: [String!]!
}

type EventObject {
  createdAt: DateTime!
  date: DateTime!
  eventType: EventType!
  id: ObjectID!
  imageUrl: String!
  link: String
  localization: [Float!]!
  name: String!
  place: String!
  time: DateTime!
  updatedAt: DateTime!
  userIds: [String!]!
}

type EventPaginationResponse {
  data: [EventObject!]!
  metadata: PaginationMetadata!
}

enum EventType {
  ENVIRONMENTAL
  SOCIAL
}

input EventUpdateInput {
  eventType: EventType
  id: String!
  imageIcon: String
  link: String
  localization: LocalizationInput
  name: String
  time: String
  userIds: [String!]
}

enum ExampleColor {
  BLACK
  BLUE
  BROWN
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
  WHITE
  YELLOW
}

input ExampleCreateInput {
  color: ExampleColor!
  name: String!
}

input ExampleFindManyInput {
  color: [ExampleColor!]
  name: String
}

input ExampleFindManySortInput {
  color: SortInput
  name: SortInput
}

input ExampleInput {
  id: ObjectID!
}

type ExampleObject {
  color: ExampleColor!
  id: ObjectID!
  name: String!
}

type ExamplePaginationResponse {
  data: [ExampleObject!]!
  metadata: PaginationMetadata!
}

input ExampleUpdateInput {
  color: ExampleColor
  id: ObjectID!
  name: String
}

scalar File

type LeaderboardEntryObject {
  activityPoints: Float!
  avatarUrl: String
  challengePoints: Float!
  email: String!
  firstname: String!
  id: ObjectID!
  lastname: String!
  rank: Float!
  totalPoints: Float!
}

input LeaderboardFindInput {
  endDate: DateTime
  limit: Int! = 10
  startDate: DateTime
}

input LocalizationInput {
  """Distance in kilometers"""
  distance: Float!

  """Your current latitude"""
  latitude: Float!

  """Your current longitude"""
  longitude: Float!
}

input MarketplaceCreateInput {
  description: String!
  name: String!
  price: Float!
}

input MarketplaceFindManyInput {
  description: String
  name: String
}

input MarketplaceFindManySortInput {
  createdAt: SortInput
  name: SortInput
  price: SortInput
  updatedAt: SortInput
}

input MarketplaceInput {
  id: ObjectID!
}

type MarketplaceObject {
  createdAt: DateTime!
  description: String!
  id: ObjectID!
  name: String!
  price: Float!
  updatedAt: DateTime!
}

type MarketplacePaginationResponse {
  data: [MarketplaceObject!]!
  metadata: PaginationMetadata!
}

input MarketplacePurchaseInput {
  marketplaceId: ObjectID!
  userId: ObjectID!
}

input MarketplaceUpdateInput {
  description: String
  id: ObjectID!
  name: String
  price: Float
}

type Mutation {
  activityAddPathPoint(input: ActivityAddPathPointInput!): ActivityObject!
  activityAddScore(input: ActivityAddScoreInput!): ActivityObject!
  activityAddTrash(input: ActivityAddTrashInput!): ActivityObject!
  activityCreate(input: ActivityCreateInput!): ActivityObject!
  activityDelete(input: ActivityInput!): ActivityObject
  activityEnd(input: ActivityEndInput!): ActivityObject!
  activityStart(input: ActivityStartInput!): ActivityObject!
  activityUpdate(input: ActivityUpdateInput!): ActivityObject
  awardCreate(input: AwardCreateInput!): AwardObject!
  awardDelete(input: AwardInput!): AwardObject
  awardUpdate(input: AwardUpdateInput!): AwardObject
  challengeCreate(input: ChallengeCreateInput!): ChallengeObject!
  challengeDelete(input: ChallengeInput!): ChallengeObject
  challengeStart(input: ChallengeStartInput!): UserChallengeProgressObject!
  challengeUpdate(input: ChallengeUpdateInput!): ChallengeObject
  challengeUpdateProgress(input: ChallengeUpdateProgressInput!): UserChallengeProgressObject!
  eventCreate(input: EventCreateInput!): EventObject!
  eventDelete(input: EventInput!): EventObject
  eventUpdate(input: EventUpdateInput!): EventObject
  exampleCreate(input: ExampleCreateInput!): ExampleObject!
  exampleDelete(input: ExampleInput!): Success!
  exampleUpdate(input: ExampleUpdateInput!): ExampleObject!
  marketplaceCreate(input: MarketplaceCreateInput!): MarketplaceObject!
  marketplaceDelete(input: MarketplaceInput!): MarketplaceObject
  marketplacePurchase(input: MarketplacePurchaseInput!): MarketplaceObject!
  marketplaceUpdate(input: MarketplaceUpdateInput!): MarketplaceObject
  userAddAward(input: UserAddAwardInput!): UserObject!
  userCreate(input: UserCreateInput!): UserObject!
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

input PaginationInput {
  """default: 1"""
  page: Int! = 1

  """default: 10, minimum: 1, max: 100"""
  pageSize: Int! = 10
}

type PaginationMetadata {
  currentPage: Int!
  pageSize: Int!
  totalCount: Int!
  totalPages: Int!
}

input PathPointInput {
  lat: String!
  lon: String!
}

type PathPointObject {
  lat: String!
  lon: String!
}

input PathPointUpdateInput {
  lat: String
  lon: String
}

type Query {
  activities(input: ActivityFindManyInput!, pagination: PaginationInput!, sort: ActivityFindManySortInput!): ActivityPaginationResponse!
  activitiesThrashMap: [PathPointObject!]!
  activity(input: ActivityInput!): ActivityObject
  activityCurrentDuration(activityId: String!): Float
  activityStarted(userId: String!): ActivityObject
  award(input: AwardInput!): AwardObject
  awards(input: AwardFindManyInput!, pagination: PaginationInput!, sort: AwardFindManySortInput!): AwardPaginationResponse!
  challenge(input: ChallengeInput!): ChallengeObject
  challenges(input: ChallengeFindManyInput!, pagination: PaginationInput!, sort: ChallengeFindManySortInput!): ChallengePaginationResponse!
  errors: [Error!]!
  event(input: EventInput!): EventObject
  events(input: EventFindManyInput!, pagination: PaginationInput!, sort: EventFindManySortInput!): EventPaginationResponse!
  example(input: ExampleInput!): ExampleObject!
  examples(input: ExampleFindManyInput!, pagination: PaginationInput!, sort: ExampleFindManySortInput!): ExamplePaginationResponse!

  """
  Get top users by total points (activities + challenges) with optional date filtering
  """
  leaderboard(input: LeaderboardFindInput!): [LeaderboardEntryObject!]!
  marketplace(input: MarketplaceInput!): MarketplaceObject
  marketplaces(input: MarketplaceFindManyInput!, pagination: PaginationInput!, sort: MarketplaceFindManySortInput!): MarketplacePaginationResponse!
  minioTest: String!
  user(input: UserInput!): UserObject
  userChallengeProgress(input: ChallengeProgressFindInput!): [UserChallengeProgressObject!]!
  users(input: UserFindManyInput!, pagination: PaginationInput!, sort: UserFindManySortInput!): UserPaginationResponse!
}

enum Sort {
  ASC
  DESC
}

input SortInput {
  direction: Sort!
}

type Success {
  success: Boolean!
}

input UserAddAwardInput {
  awardId: ObjectID!
  userId: ObjectID!
}

type UserChallengeProgressObject {
  challenge: ChallengeObject
  challengeId: ObjectID!
  completedAt: DateTime
  createdAt: DateTime!
  id: ObjectID!
  progress: Int!
  startedAt: DateTime!
  status: String!
  updatedAt: DateTime!
  userId: ObjectID!
}

input UserCreateInput {
  avatarUrl: String
  awardIds: [ObjectID!]
  email: String!
  firstname: String!
  lastname: String!
}

input UserFindManyInput {
  email: String
  firstname: String
  lastname: String
}

input UserFindManySortInput {
  createdAt: SortInput
  email: SortInput
  firstname: SortInput
  lastname: SortInput
  updatedAt: SortInput
}

input UserInput {
  id: ObjectID!
}

type UserObject {
  avatarUrl: String
  awardIds: [ObjectID!]!
  awards: [AwardObject!]!
  challengeProgress: [UserChallengeProgressObject!]!
  challenges: [ChallengeObject!]!
  coin: Float!
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ObjectID!
  lastname: String!
  points: Float!
  updatedAt: DateTime!
}

type UserPaginationResponse {
  data: [UserObject!]!
  metadata: PaginationMetadata!
}