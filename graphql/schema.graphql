# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Error {
  EXAMPLE_NAME_NOT_UNIQUE_CODE
  EXAMPLE_NOT_FOUND_CODE
  UNAUTHENTICATED_ERROR_CODE
}

enum ExampleColor {
  BLACK
  BLUE
  BROWN
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
  WHITE
  YELLOW
}

input ExampleCreateInput {
  color: ExampleColor!
  name: String!
}

input ExampleFindManyInput {
  color: [ExampleColor!]
  name: String
}

input ExampleFindManySortInput {
  color: SortInput
  name: SortInput
}

input ExampleInput {
  id: ObjectID!
}

type ExampleObject {
  color: ExampleColor!
  id: ObjectID!
  name: String!
}

type ExamplePaginationResponse {
  data: [ExampleObject!]!
  metadata: PaginationMetadata!
}

input ExampleUpdateInput {
  color: ExampleColor
  id: ObjectID!
  name: String
}

scalar File

type Mutation {
  exampleCreate(input: ExampleCreateInput!): ExampleObject!
  exampleDelete(input: ExampleInput!): Success!
  exampleUpdate(input: ExampleUpdateInput!): ExampleObject!
  userCreate(input: UserCreateInput!): UserObject!
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

input PaginationInput {
  """default: 1"""
  page: Int! = 1

  """default: 10, minimum: 1, max: 100"""
  pageSize: Int! = 10
}

type PaginationMetadata {
  currentPage: Int!
  pageSize: Int!
  totalCount: Int!
  totalPages: Int!
}

type Query {
  errors: [Error!]!
  example(input: ExampleInput!): ExampleObject!
  examples(input: ExampleFindManyInput!, pagination: PaginationInput!, sort: ExampleFindManySortInput!): ExamplePaginationResponse!
  user(input: UserInput!): UserObject
  users(input: UserFindManyInput!, pagination: PaginationInput!, sort: UserFindManySortInput!): UserPaginationResponse!
}

enum Sort {
  ASC
  DESC
}

input SortInput {
  direction: Sort!
}

type Success {
  success: Boolean!
}

input UserCreateInput {
  avatarUrl: String
  email: String!
  firstname: String!
  lastname: String!
}

input UserFindManyInput {
  email: String
  firstname: String
  lastname: String
}

input UserFindManySortInput {
  createdAt: SortInput
  email: SortInput
  firstname: SortInput
  lastname: SortInput
  updatedAt: SortInput
}

input UserInput {
  id: ObjectID!
}

type UserObject {
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ObjectID!
  lastname: String!
  updatedAt: DateTime!
}

type UserPaginationResponse {
  data: [UserObject!]!
  metadata: PaginationMetadata!
}