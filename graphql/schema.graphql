# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActivityCreateInput {
  activityType: ActivityType!
  description: String!
  distance: Float!
  durationTime: Float!
  imageUrls: [String!]!
  name: String!
  path: [PathPointInput!]!
  points: Float!
  trashCount: Float!
}

input ActivityFindManyInput {
  activityType: ActivityType
  description: String
  maxDistance: Float
  maxDurationTime: Float
  maxPoints: Float
  maxTrashCount: Float
  minDistance: Float
  minDurationTime: Float
  minPoints: Float
  minTrashCount: Float
  name: String
}

input ActivityFindManySortInput {
  activityType: SortInput
  createdAt: SortInput
  distance: SortInput
  durationTime: SortInput
  name: SortInput
  points: SortInput
  trashCount: SortInput
  updatedAt: SortInput
}

input ActivityInput {
  id: ObjectID!
}

type ActivityObject {
  activityType: ActivityType!
  createdAt: DateTime!
  description: String!
  distance: Float!
  durationTime: Float!
  id: ObjectID!
  imageUrls: [String!]!
  name: String!
  path: [PathPointObject!]!
  points: Float!
  trashCount: Float!
  updatedAt: DateTime!
  user: UserObject
  userId: ObjectID!
}

type ActivityPaginationResponse {
  data: [ActivityObject!]!
  metadata: PaginationMetadata!
}

enum ActivityType {
  BIKING
  OTHER
  RUNNING
  TREKKING
  WALKING
}

input ActivityUpdateInput {
  activityType: ActivityType
  description: String
  distance: Float
  durationTime: Float
  id: ObjectID!
  imageUrls: [String!]
  name: String
  path: [PathPointUpdateInput!]
  points: Float
  trashCount: Float
}

input AwardCreateInput {
  iconUrl: String!
}

input AwardFindManyInput {
  iconUrl: String
}

input AwardFindManySortInput {
  createdAt: SortInput
  iconUrl: SortInput
  updatedAt: SortInput
}

input AwardInput {
  id: ObjectID!
}

type AwardObject {
  createdAt: DateTime!
  iconUrl: String!
  id: ObjectID!
  title: String!
  updatedAt: DateTime!
}

type AwardPaginationResponse {
  data: [AwardObject!]!
  metadata: PaginationMetadata!
}

input AwardUpdateInput {
  iconUrl: String
  id: ObjectID!
}

input ChallengeCreateInput {
  description: String!
  iconUrl: String!
  points: Float!
  topic: String!
}

input ChallengeFindManyInput {
  description: String
  points: Float
  topic: String
}

input ChallengeFindManySortInput {
  createdAt: SortInput
  description: SortInput
  points: SortInput
  topic: SortInput
  updatedAt: SortInput
}

input ChallengeInput {
  id: ObjectID!
}

type ChallengeObject {
  createdAt: DateTime!
  description: String!
  iconUrl: String!
  id: ObjectID!
  points: Float!
  topic: String!
  updatedAt: DateTime!
}

type ChallengePaginationResponse {
  data: [ChallengeObject!]!
  metadata: PaginationMetadata!
}

input ChallengeUpdateInput {
  description: String
  iconUrl: String
  id: ObjectID!
  points: Float
  topic: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Error {
  EXAMPLE_NAME_NOT_UNIQUE_CODE
  EXAMPLE_NOT_FOUND_CODE
  UNAUTHENTICATED_ERROR_CODE
}

enum ExampleColor {
  BLACK
  BLUE
  BROWN
  GREEN
  ORANGE
  PINK
  PURPLE
  RED
  WHITE
  YELLOW
}

input ExampleCreateInput {
  color: ExampleColor!
  name: String!
}

input ExampleFindManyInput {
  color: [ExampleColor!]
  name: String
}

input ExampleFindManySortInput {
  color: SortInput
  name: SortInput
}

input ExampleInput {
  id: ObjectID!
}

type ExampleObject {
  color: ExampleColor!
  id: ObjectID!
  name: String!
}

type ExamplePaginationResponse {
  data: [ExampleObject!]!
  metadata: PaginationMetadata!
}

input ExampleUpdateInput {
  color: ExampleColor
  id: ObjectID!
  name: String
}

scalar File

type LeaderboardEntryObject {
  activityPoints: Float!
  avatarUrl: String
  challengePoints: Float!
  email: String!
  firstname: String!
  id: ObjectID!
  lastname: String!
  rank: Float!
  totalPoints: Float!
}

type Mutation {
  activityCreate(input: ActivityCreateInput!): ActivityObject!
  activityDelete(input: ActivityInput!): ActivityObject
  activityUpdate(input: ActivityUpdateInput!): ActivityObject
  awardCreate(input: AwardCreateInput!): AwardObject!
  awardDelete(input: AwardInput!): AwardObject
  awardUpdate(input: AwardUpdateInput!): AwardObject
  challengeCreate(input: ChallengeCreateInput!): ChallengeObject!
  challengeDelete(input: ChallengeInput!): ChallengeObject
  challengeUpdate(input: ChallengeUpdateInput!): ChallengeObject
  exampleCreate(input: ExampleCreateInput!): ExampleObject!
  exampleDelete(input: ExampleInput!): Success!
  exampleUpdate(input: ExampleUpdateInput!): ExampleObject!
  userCreate(input: UserCreateInput!): UserObject!
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

input PaginationInput {
  """default: 1"""
  page: Int! = 1

  """default: 10, minimum: 1, max: 100"""
  pageSize: Int! = 10
}

type PaginationMetadata {
  currentPage: Int!
  pageSize: Int!
  totalCount: Int!
  totalPages: Int!
}

input PathPointInput {
  lat: String!
  lon: String!
}

type PathPointObject {
  lat: String!
  lon: String!
}

input PathPointUpdateInput {
  lat: String
  lon: String
}

type Query {
  activities(input: ActivityFindManyInput!, pagination: PaginationInput!, sort: ActivityFindManySortInput!): ActivityPaginationResponse!
  activity(input: ActivityInput!): ActivityObject
  award(input: AwardInput!): AwardObject
  awards(input: AwardFindManyInput!, pagination: PaginationInput!, sort: AwardFindManySortInput!): AwardPaginationResponse!
  challenge(input: ChallengeInput!): ChallengeObject
  challenges(input: ChallengeFindManyInput!, pagination: PaginationInput!, sort: ChallengeFindManySortInput!): ChallengePaginationResponse!
  errors: [Error!]!
  example(input: ExampleInput!): ExampleObject!
  examples(input: ExampleFindManyInput!, pagination: PaginationInput!, sort: ExampleFindManySortInput!): ExamplePaginationResponse!

  """Get top users by total points (activities + challenges)"""
  leaderboard(limit: Int! = 10): [LeaderboardEntryObject!]!
  minioTest: String!
  user(input: UserInput!): UserObject
  users(input: UserFindManyInput!, pagination: PaginationInput!, sort: UserFindManySortInput!): UserPaginationResponse!
}

enum Sort {
  ASC
  DESC
}

input SortInput {
  direction: Sort!
}

type Success {
  success: Boolean!
}

input UserCreateInput {
  avatarUrl: String
  awardIds: [ObjectID!]
  challengeIds: [ObjectID!]
  email: String!
  firstname: String!
  lastname: String!
}

input UserFindManyInput {
  email: String
  firstname: String
  lastname: String
}

input UserFindManySortInput {
  createdAt: SortInput
  email: SortInput
  firstname: SortInput
  lastname: SortInput
  updatedAt: SortInput
}

input UserInput {
  id: ObjectID!
}

type UserObject {
  avatarUrl: String
  awardIds: [ObjectID!]!
  awards: [AwardObject!]!
  challengeIds: [ObjectID!]!
  challenges: [ChallengeObject!]!
  createdAt: DateTime!
  email: String!
  firstname: String!
  id: ObjectID!
  lastname: String!
  points: Float!
  updatedAt: DateTime!
}

type UserPaginationResponse {
  data: [UserObject!]!
  metadata: PaginationMetadata!
}